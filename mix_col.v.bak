`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
module mix_col(i_shift,i_mix);
input [0:127]i_shift;
output [0:127]i_mix;

// assign i_mix[0:7] = mul_by_14(i_shift[0:7]) ^ mul_by_11(i_shift[8:15]) ^ mul_by_13(i_shift[16:23]) ^ mul_by_9(i_shift[24:31]);
// assign i_mix[8:15] = mul_by_9(i_shift[0:7]) ^ mul_by_14(i_shift[8:15]) ^ mul_by_11(i_shift[16:23]) ^ mul_by_13(i_shift[24:31]);
// assign i_mix[16:23] = mul_by_13(i_shift[0:7]) ^ mul_by_9(i_shift[8:15]) ^ mul_by_14(i_shift[16:23]) ^ mul_by_11(i_shift[24:31]);
// assign i_mix[24:31] = mul_by_11(i_shift[0:7]) ^ mul_by_13(i_shift[8:15]) ^ mul_by_9(i_shift[16:23]) ^ mul_by_14(i_shift[24:31]);

// assign i_mix[32:39] = mul_by_14(i_shift[32:39]) ^ mul_by_11(i_shift[40:47]) ^ mul_by_13(i_shift[48:55]) ^ mul_by_9(i_shift[56:63]);
// assign i_mix[40:47] = mul_by_9(i_shift[32:39]) ^ mul_by_14(i_shift[40:47]) ^ mul_by_11(i_shift[48:55]) ^ mul_by_13(i_shift[56:63]);
// assign i_mix[48:55] = mul_by_13(i_shift[32:39]) ^ mul_by_9(i_shift[40:47]) ^ mul_by_14(i_shift[48:55]) ^ mul_by_11(i_shift[56:63]);
// assign i_mix[56:63] = mul_by_11(i_shift[32:39]) ^ mul_by_13(i_shift[40:47]) ^ mul_by_9(i_shift[48:55]) ^ mul_by_14(i_shift[56:63]);

// assign i_mix[64:71] = mul_by_14(i_shift[64:71]) ^ mul_by_11(i_shift[72:79]) ^ mul_by_13(i_shift[80:87]) ^ mul_by_9(i_shift[88:95]);
// assign i_mix[72:79] = mul_by_9(i_shift[64:71]) ^ mul_by_14(i_shift[72:79]) ^ mul_by_11(i_shift[80:87]) ^ mul_by_13(i_shift[88:95]);
// assign i_mix[80:87] = mul_by_13(i_shift[64:71]) ^ mul_by_9(i_shift[72:79]) ^ mul_by_14(i_shift[80:87]) ^ mul_by_11(i_shift[88:95]);
// assign i_mix[88:95] = mul_by_11(i_shift[64:71]) ^ mul_by_13(i_shift[72:79]) ^ mul_by_9(i_shift[80:87]) ^ mul_by_14(i_shift[88:95]);

// assign i_mix[96:103] = mul_by_14(i_shift[96:103]) ^ mul_by_11(i_shift[104:111]) ^ mul_by_13(i_shift[112:119]) ^ mul_by_9(i_shift[120:127]);
// assign i_mix[104:111] = mul_by_9(i_shift[96:103]) ^ mul_by_14(i_shift[104:111]) ^ mul_by_11(i_shift[112:119]) ^ mul_by_13(i_shift[120:127]);
// assign i_mix[112:119] = mul_by_13(i_shift[96:103]) ^ mul_by_9(i_shift[104:111]) ^ mul_by_14(i_shift[112:119]) ^ mul_by_11(i_shift[120:127]);
// assign i_mix[120:127] = mul_by_11(i_shift[96:103]) ^ mul_by_13(i_shift[104:111]) ^ mul_by_9(i_shift[112:119]) ^ mul_by_14(i_shift[120:127]);

// function [0:7]xtime;
// input [0:7]i;
// begin
// if(i[0] == 0)
// xtime = {i[1:7],1'b0};
// else
// xtime = {i[1:7],1'b0}^8'h1b;
// end
// endfunction


function [0:7]xtime1;
input [0:7]x;
    xtime1 = ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
endfunction

function [0:7]Multiply;
input [0:7] x;
input [0:7] y;
    Multiple = ((y & 1) * x) ^ ((y >> 1 & 1) * xtime(x)) 
             ^ ((y >> 2 & 1) * xtime(xtime(x)))
             ^ ((y >> 3 & 1) * xtime(xtime(xtime(x)))) 
             ^ ((y >> 4 & 1) * xtime(xtime(xtime(xtime(x)))));
endfunction
// function [0:7]mul_by_9;
// input [0:7]i;
//     mul_by_9 = i[0:7]^xtime(xtime(xtime(i[0:7])));
// endfunction

// function [0:7]mul_by_11;
// input [0:7] i;
//     mul_by_11 = i[0:7] ^ xtime(xtime(xtime(xtime(i[0:7]))));
// endfunction
// function [0:7]mul_by_13;
// input [0:7] i;
//     mul_by_13 = i[0:7] ^ xtime(i[0:7]) ^ xtime(xtime(xtime(xtime(i[0:7]))));
// endfunction
// function [0:7]mul_by_14;
// input [0:7] i;
//     mul_by_14 = xtime(xtime(i[0:7])) ^ xtime(xtime(xtime(xtime(i[0:7]))));
// endfunction

endmodule

module tb_mixcolumn();
	reg [0:127] inText;
	wire [0:127] outText;
	
    mix_col mxc(
	    .i_shift(inText),
	    .i_mix(outText));
/*
    always
    begin
        clk = 1'b1;
        #(T/2);
        clk = 1'b0;
        #(T/2);
    end
    */
    initial
    begin

    //key = 128'h0105090d02060a0e03070b0f04080c10;
    
    //data = 128'h216242c6db17a2abe6388d1dfa3c6260;

	    // key = 128'h0102030405060708090a0b0c0d0e0f10;
    	inText = 128'h21dbe6fa6217383c42a28d62c6ab1d60;
    		$display("key: %c", outText);
	//key = 128'h2b28ab097eaef7cf15d2154f16a6883c;
	//data= 128'h69c4e0d86a7b0430d8cdb78070b4c55a;
    end
endmodule